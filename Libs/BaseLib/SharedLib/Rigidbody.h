/*!
@file Rigidbody.h
@brief 物理計算コンポーネント
@copyright Copyright (c) 2017 WiZ Tamura Hiroki,Yamanoi Yasushi.
*/
#pragma once
#include "stdafx.h"

namespace basecross {


	//--------------------------------------------------------------------------------------
	///	 速度を基準とした物理位置計算コンポーネント
	//--------------------------------------------------------------------------------------
	class Rigidbody : public Component {
	public:
		//--------------------------------------------------------------------------------------
		/*!
		@brief	コンストラクタ
		@param[in]	GameObjectPtr	ゲームオブジェクト
		*/
		//--------------------------------------------------------------------------------------
		explicit Rigidbody(const shared_ptr<GameObject>& GameObjectPtr);
		//--------------------------------------------------------------------------------------
		/*!
		@brief	デストラクタ
		*/
		//--------------------------------------------------------------------------------------
		virtual ~Rigidbody();
		//--------------------------------------------------------------------------------------
		/*!
		@brief	速度を得る
		@return	速度
		*/
		//--------------------------------------------------------------------------------------
		const bsm::Vec3& GetVelocity() const;
		//--------------------------------------------------------------------------------------
		/*!
		@brief	速度を設定する
		@param[in]	Velocity	速度
		@return	なし
		*/
		//--------------------------------------------------------------------------------------
		void SetVelocity(const bsm::Vec3& Velocity);
		//--------------------------------------------------------------------------------------
		/*!
		@brief	速度を設定する
		@param[in]	x	速度X
		@param[in]	y	速度Y
		@param[in]	z	速度Z
		@return	なし
		*/
		//--------------------------------------------------------------------------------------
		void SetVelocity(float x, float y, float z);
		//--------------------------------------------------------------------------------------
		/*!
		@brief	速度を０に設定する
		@return	なし
		*/
		//--------------------------------------------------------------------------------------
		void SetVelocityZero();
		//--------------------------------------------------------------------------------------
		/*!
		@brief	重力速度を得る
		@return	重力速度
		*/
		//--------------------------------------------------------------------------------------
		const bsm::Vec3& GetGravityVelocity() const;
		//--------------------------------------------------------------------------------------
		/*!
		@brief	重力速度を設定する
		@param[in]	Velocity	速度
		@return	なし
		*/
		//--------------------------------------------------------------------------------------
		void SetGravityVelocity(const bsm::Vec3& Velocity);
		//--------------------------------------------------------------------------------------
		/*!
		@brief	重力速度を設定する
		@param[in]	x	速度X
		@param[in]	y	速度Y
		@param[in]	z	速度Z
		@return	なし
		*/
		//--------------------------------------------------------------------------------------
		void SetGravityVelocity(float x, float y, float z);
		//--------------------------------------------------------------------------------------
		/*!
		@brief	重力速度を０に設定する
		@return	なし
		*/
		//--------------------------------------------------------------------------------------
		void SetGravityVelocityZero();
		//--------------------------------------------------------------------------------------
		/*!
		@brief	両方の速度を０に設定する
		@return	なし
		*/
		//--------------------------------------------------------------------------------------
		void SetAllVelocityZero();

		//--------------------------------------------------------------------------------------
		/*!
		@brief	最高速度を得る
		@return	最高速度
		*/
		//--------------------------------------------------------------------------------------
		float GetMaxSpeed() const;
		//--------------------------------------------------------------------------------------
		/*!
		@brief	最高速度を設定する
		@param[in]	f	最高速度
		@return	なし
		*/
		//--------------------------------------------------------------------------------------
		void SetMaxSpeed(float f);
		//--------------------------------------------------------------------------------------
		/*!
		@brief	最低速度を得る。最低速度は各方向に対して設定できる。<br />
		各方向が最低速度を下回った場合、その値は0になる
		@return	最低速度
		*/
		//--------------------------------------------------------------------------------------
		const bsm::Vec3& GetMinVelocity() const;
		//--------------------------------------------------------------------------------------
		/*!
		@brief	最低速度を設定する
		@param[in]	Velocity	最低速度
		@return	なし
		*/
		//--------------------------------------------------------------------------------------
		void SetMinVelocity(const bsm::Vec3& Velocity);
		//--------------------------------------------------------------------------------------
		/*!
		@brief	最高速度を設定する
		@param[in]	x	最低速度X
		@param[in]	y	最低速度Y
		@param[in]	z	最低速度Z
		@return	なし
		*/
		//--------------------------------------------------------------------------------------
		void SetMinVelocity(float x, float y, float z);
		//--------------------------------------------------------------------------------------
		/*!
		@brief	回転速度（ベクトル）を得る。
		@return	回転速度（ベクトル）
		*/
		//--------------------------------------------------------------------------------------
		const bsm::Vec3& GetAngularVelocity() const;
		//--------------------------------------------------------------------------------------
		/*!
		@brief	回転速度（ベクトル）を設定する
		@param[in]	AngularVelocity	回転速度（ベクトル）
		@return	なし
		*/
		//--------------------------------------------------------------------------------------
		void SetAngularVelocity(const bsm::Vec3& AngularVelocity);
		//--------------------------------------------------------------------------------------
		/*!
		@brief	回転速度（ベクトル）を設定する
		@param[in]	x	回転速度（ベクトル）X
		@param[in]	Y	回転速度（ベクトル）Y
		@param[in]	Z	回転速度（ベクトル）Z
		@return	なし
		*/
		//--------------------------------------------------------------------------------------
		void SetAngularVelocity(float x, float y, float z);
		//--------------------------------------------------------------------------------------
		/*!
		@brief	質量を得る。Forceが0より大きい場合、速度はForceと質量による計算が合算される。<br />
		速度を直接操作する場合はForceは変更しないほうが良い。
		@return	質量
		*/
		//--------------------------------------------------------------------------------------
		float GetMass() const;
		//--------------------------------------------------------------------------------------
		/*!
		@brief	質量を設定する
		@param[in]	f	質量
		@return	なし
		*/
		//--------------------------------------------------------------------------------------
		void SetMass(float f);
		//--------------------------------------------------------------------------------------
		/*!
		@brief	反発係数を得る。衝突判定により参照される。
		@return	反発係数
		*/
		//--------------------------------------------------------------------------------------
		float GetReflection() const;
		//--------------------------------------------------------------------------------------
		/*!
		@brief	反発係数を設定する
		@param[in]	f	反発係数
		@return	なし
		*/
		//--------------------------------------------------------------------------------------
		void SetReflection(float f);
		//--------------------------------------------------------------------------------------
		/*!
		@brief	フォース（力）を得る。速度計算に使用される。
		@return	フォース
		*/
		//--------------------------------------------------------------------------------------
		const bsm::Vec3& GetForce() const;
		//--------------------------------------------------------------------------------------
		/*!
		@brief	フォース（力）を設定する
		@param[in]	Force	フォース
		@return	なし
		*/
		//--------------------------------------------------------------------------------------
		void SetForce(const bsm::Vec3& Force);
		//--------------------------------------------------------------------------------------
		/*!
		@brief	フォース（力）を設定する
		@param[in]	x	フォースX
		@param[in]	y	フォースY
		@param[in]	z	フォースZ
		@return	なし
		*/
		//--------------------------------------------------------------------------------------
		void SetForce(float x, float y, float z);
		//--------------------------------------------------------------------------------------
		/*!
		@brief	減速フォースを得る。減速フォースは最終的に速度にブレーキを掛ける。<br />
		実際には質量で割った値（逆加速）が計算され適用される
		@return	減速フォース
		*/
		//--------------------------------------------------------------------------------------
		float GetFrictionForce() const;
		//--------------------------------------------------------------------------------------
		/*!
		@brief	減速フォースを設定する。減速フォースは最終的に速度にブレーキを掛ける。<br />
		実際には質量で割った値（逆加速）が計算され適用される
		@param[in]	f	減速フォース
		@return	なし
		*/
		//--------------------------------------------------------------------------------------
		void SetFrictionForce(float f);
		//--------------------------------------------------------------------------------------
		/*!
		@brief	フォース（力）の最大値を得る。
		@return	フォースの最大値
		*/
		//--------------------------------------------------------------------------------------
		float GetMaxForce() const;
		//--------------------------------------------------------------------------------------
		/*!
		@brief	フォース（力）の最大値を設定する
		@param[in]	f	フォースの最大値
		@return	なし
		*/
		//--------------------------------------------------------------------------------------
		void SetMaxForce(float f);
		//--------------------------------------------------------------------------------------
		/*!
		@brief	指定した時間だけ速度に従って移動する
		@param[in]	CalcTime	時間
		@return	なし
		*/
		//--------------------------------------------------------------------------------------
		void UpdateFromTime(float CalcTime);
		//--------------------------------------------------------------------------------------
		/*!
		@brief 更新処理
		@return	なし
		*/
		//--------------------------------------------------------------------------------------
		virtual void OnUpdate()override;
		//--------------------------------------------------------------------------------------
		/*!
		@brief 描画処理。デフォルトは何も行わない
		@return	なし
		*/
		//--------------------------------------------------------------------------------------
		virtual void OnDraw()override {}
	private:
		// pImplイディオム
		struct Impl;
		unique_ptr<Impl> pImpl;

	};



}
//end basecross
